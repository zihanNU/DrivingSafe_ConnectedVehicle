d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
inte2=0
for (i in c(2:length(DX))){
inte2=(DX[i]-DX[i-1])*(DY[i]+DY[i-1])/2+inte
}
length(DY)
sum(DY)
sum(DY*0.02)
score<-sum(DY)*STEP
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
##For D1 and DS
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score<-sum(DY)*STEP
score1<-sum(DY)*STEP
score1
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d2$x
d1y<-d2$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score1<-sum(DY)*STEP
score1
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d3$x
d1y<-d3$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score1<-sum(DY)*STEP
score1
mu1=sample(-100:100, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
plot(d,ylim=c(0, 0.6),lwd=3,col=10,lty=1,main="Driver 1")
for (i in c(1:9)){
a<-rmvnorm(200,mu1[i])
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian")
lines(d,col=i,lwd=1,lty=i)
}
name=c('GMM','feature1','feature2','feature3','feature4','feature5'
,'feature6','feature7','feature8','feature9')
lwdline=c(3,1,1,1,1,1,1,1,1,1)
colline=c(10,1,2,3,4,5,6,7,8,9)
ltyline=c(1,1,2,3,4,5,6,7,8,9)
legend("topright", name,lwd=lwdline,col=colline,lty=ltyline)
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score1<-sum(DY)*STEP
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
plot(d,ylim=c(0, 0.6),lwd=3,col=10,lty=1,main="Driver 1")
for (i in c(1:9)){
a<-rmvnorm(200,mu1[i])
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian")
lines(d,col=i,lwd=1,lty=i)
}
name=c('GMM','feature1','feature2','feature3','feature4','feature5'
,'feature6','feature7','feature8','feature9')
lwdline=c(3,1,1,1,1,1,1,1,1,1)
colline=c(10,1,2,3,4,5,6,7,8,9)
ltyline=c(1,1,2,3,4,5,6,7,8,9)
legend("topright", name,lwd=lwdline,col=colline,lty=ltyline)
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score1<-sum(DY)*STEP
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
plot(d,ylim=c(0, 0.6),lwd=3,col=10,lty=1,main="Driver 1")
for (i in c(1:9)){
a<-rmvnorm(200,mu1[i])
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian")
lines(d,col=i,lwd=1,lty=i)
}
name=c('GMM','feature1','feature2','feature3','feature4','feature5'
,'feature6','feature7','feature8','feature9')
lwdline=c(3,1,1,1,1,1,1,1,1,1)
colline=c(10,1,2,3,4,5,6,7,8,9)
ltyline=c(1,1,2,3,4,5,6,7,8,9)
legend("topright", name,lwd=lwdline,col=colline,lty=ltyline)
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score1<-sum(DY)*STEP
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
plot(d,ylim=c(0, 0.6),lwd=3,col=10,lty=1,main="Driver 1")
for (i in c(1:9)){
a<-rmvnorm(200,mu1[i])
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian")
lines(d,col=i,lwd=1,lty=i)
}
name=c('GMM','feature1','feature2','feature3','feature4','feature5'
,'feature6','feature7','feature8','feature9')
lwdline=c(3,1,1,1,1,1,1,1,1,1)
colline=c(10,1,2,3,4,5,6,7,8,9)
ltyline=c(1,1,2,3,4,5,6,7,8,9)
legend("topright", name,lwd=lwdline,col=colline,lty=ltyline)
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score1<-sum(DY)*STEP
mu1
score1
min.f1f2 <-function(ds,d1){
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score<-sum(DY)*STEP
}
Scores=zeros(1:2000)
for (i in c(1:2000)){:
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
Scores[i]=min.f1f2(ds,d1)
}
Scores=zeros(1:2000)
for (k in c(1:2000)){:
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
Scores[k]=min.f1f2(ds,d1)
}
for (k in c(1:2000)){
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
Scores[k]=min.f1f2(ds,d1)
}
Scores=zeros(1:2000)
Scores<-rep(0, 2000)
for (k in c(1:2000)){
mu1=sample(-200:200, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
Scores[k]=min.f1f2(ds,d1)
}
hist(Scores)
length(Scores[Scores > 0.9])
length(Scores[Scores > 0.8])
length(Scores[Scores > 0.85])
46/2000
755/2000
NUM=3500
Scores<-rep(0, NUM)
for (k in c(1:NUM)){
mu1=sample(-100:100, 9, replace=FALSE)/100
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
Scores[k]=min.f1f2(ds,d1)
}
hist(Scores)
length(Scores[Scores > 0.9])/NUM
length(Scores[Scores < 0.8])/NUM
length(Scores[Scores < 0.85])/NUM
getwd
setwd(C:\Users\Zihan\Dropbox\PAPER\2016-2017\WorkingOn\ANT_SpeedHarm\GMM_Code)
getwd()
setwd("C:/Users/Zihan/Dropbox/PAPER/2016-2017/WorkingOn/ANT_SpeedHarm/GMM_Code")
load("Z:/Zihan/microsimulation/01052017/18000/R_analysis/.RData")
install.packages("modeest")
library(stats) # for bw.SJ() and density()
library(modeest) # for mlv()
library(mixtools) # for mvnormalmixEM()
install.packages("modeest")
install.packages("mixtools")
min.f1f2 <-function(ds,d1){
##Similarity
STEP=0.02
DX<-seq(-5, 5, STEP)
DY<-ds$y[0:length(DX)]
d1x<-d1$x
d1y<-d1$y
for (i in c(2:500)){
for (j in c(1:510)){
if (DX[i]<d1x[1]){
DY[i]=0
break}
if (DX[i]>d1x[length(d1x)])
{DY[i]=0
break}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+1])){
k=(d1y[j+1]-d1y[j])/(d1x[j+1]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
if ((DX[i]>d1x[j]) & (DX[i]<d1x[j+2])){
k=(d1y[j+2]-d1y[j])/(d1x[j+2]-d1x[j])
y=k*(DX[i]-d1x[j])+d1y[j]
DY[i]=min(y,DY[i])
break
}
}
}
score<-sum(DY)*STEP
}
score_driver <-function(NUM,features){
Scores<-rep(0, NUM)
for (k in c(1:NUM)){
#mu1=sample(-100:100, 9, replace=FALSE)/100
mu1=features[k,]
a<-rmvnorm(200,mu1)
b<-bw.SJ(a) # Find bandwith with Shafer-Jones method
d<-density(a, bw=b, kernel="gaussian") # Gaussian kernel density estimate
d1<-d
Scores[k]=min.f1f2(ds,d1)
}
return (Scores)
}
features_20<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_20.csv', header = F)
set_wd('Z:/Zihan/microsimulation/01052017/18000/R_analysis')
setwd('Z:/Zihan/microsimulation/01052017/18000/R_analysis')
features_0<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_0.csv', header = F)
Scores0<-score_driver(2466,features_0)
library(modeest) # for mlv()
library(mixtools) # for mvnormalmixEM()
Scores0<-score_driver(2466,features_0)
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,500))
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,800))
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,1000))
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,800))
write.csv(Scores0,'Score0.csv')
Scores20<-score_driver(2466,features_20)
hist(Scores10*100,col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(Scores20*100,col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(Scores20*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,800))
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,800))
hist(Scores20*100,breaks=10,col=rgb(0.0,0.1,0.1,0.5),xlim=c(40,100),ylim=c(0,800),add=T)
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(30,100),ylim=c(0,800))
hist(Scores20*100,breaks=10,col=rgb(0.0,0.1,0.1,0.5),xlim=c(30,100),ylim=c(0,800),add=T)
write.csv(Scores20,'Score20.csv')
features_0<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_0.csv', header = F)
features_20<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_20.csv', header = F)
Scores0<-score_driver(2466,features_0)
length(Scores[Scores0 < 0.6])/NUM
length(Scores[Scores0 < 0.70])/NUM
length(Scores[Scores0 < 0.65])/NUM
length(Scores[Scores0 < 0.59])/NUM
length(Scores[Scores0 < 0.6])/NUM
length(Scores[Scores0 < 0.599])/NUM
length(Scores[Scores0 < 0.595])/NUM
length(Scores[Scores0 < 0.595])/2466
length(Scores[Scores0 < 0.65])/2466
length(Scores[Scores0 < 0.60])/2466
length(Scores[Scores0 < 0.5])/2466
length(Scores[Scores0 < 0.55])/2466
length(Scores[Scores0 < 0.58])/2466
features_10<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_10.csv', header = F)
Scores10<-score_driver(2466,features_10)
write.csv(Scores10,'Score10.csv')
features_score20<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_score_20.csv', header = F)
Scores_CV20<-score_driver(2466,features_score20)
write.csv(Scores_CV20,'Score_CV20.csv')
features_score20<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_score_20_all.csv', header = F)
features_score20<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_score_20_all.csv', header = F)
features_score20<-read.csv('Z:/Zihan/microsimulation/01052017/18000/R_analysis/driver_features_20_all.csv', header = F)
Scores20<-score_driver(2498,features_20)
hist(Scores_CV20*100,col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(30,100),ylim=c(0,800))
hist(Scores0*100,breaks=10,col=rgb(0.1,0.1,0.1,0.5),xlim=c(30,100),ylim=c(0,800))
hist(Scores20*100,breaks=10,col=rgb(0.0,0.1,0.1,0.5),xlim=c(30,100),ylim=c(0,800),add=T)
hist(Scores_CV20*100,col=rgb(0.8,0.8,0.8,0.5), add=T)
write.csv(Scores_CV20,'Score_CV20_all.csv')
length(Scores_CV20[Scores_CV20 < 0.9])
length(Scores_CV20[Scores_CV20 < 0.8])
length(Scores_CV20[Scores_CV20 < 0.7])
Scores_CV20<-score_driver(2498,features_score20)
